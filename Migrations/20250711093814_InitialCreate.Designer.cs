// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SportCentrum.Context;

#nullable disable

namespace Sport_centrum.Migrations
{
    [DbContext(typeof(SportCentrumContext))]
    [Migration("20250711093814_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SportCentrum.Models.Coach", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Specialty")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Coaches");
                });

            modelBuilder.Entity("SportCentrum.Models.CoachTraining", b =>
                {
                    b.Property<int>("CoachId")
                        .HasColumnType("integer");

                    b.Property<string>("TrainingId")
                        .HasColumnType("text");

                    b.HasKey("CoachId", "TrainingId");

                    b.HasIndex("TrainingId");

                    b.ToTable("CoachTrainings");
                });

            modelBuilder.Entity("SportCentrum.Models.Training", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<TimeSpan?>("Duration")
                        .HasColumnType("interval");

                    b.Property<TimeSpan?>("DurationWithCoach")
                        .HasColumnType("interval");

                    b.Property<TimeSpan?>("DurationWithoutCoach")
                        .HasColumnType("interval");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Trainings");
                });

            modelBuilder.Entity("SportCentrum.Models.TrainingReservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ReservationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TrainingSessionId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TrainingSessionId");

                    b.HasIndex("UserId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("SportCentrum.Models.TrainingSession", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<int?>("CoachId")
                        .HasColumnType("integer");

                    b.Property<string>("DayOfWeek")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("End")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsGroup")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Start")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TrainingId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CoachId");

                    b.HasIndex("TrainingId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("SportCentrum.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SportCentrum.Models.CoachTraining", b =>
                {
                    b.HasOne("SportCentrum.Models.Coach", "Coach")
                        .WithMany("CoachTrainings")
                        .HasForeignKey("CoachId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportCentrum.Models.Training", "Training")
                        .WithMany("CoachTrainings")
                        .HasForeignKey("TrainingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coach");

                    b.Navigation("Training");
                });

            modelBuilder.Entity("SportCentrum.Models.TrainingReservation", b =>
                {
                    b.HasOne("SportCentrum.Models.TrainingSession", "TrainingSession")
                        .WithMany("Reservations")
                        .HasForeignKey("TrainingSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportCentrum.Models.User", "User")
                        .WithMany("Reservations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TrainingSession");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SportCentrum.Models.TrainingSession", b =>
                {
                    b.HasOne("SportCentrum.Models.Coach", "Coach")
                        .WithMany("Sessions")
                        .HasForeignKey("CoachId");

                    b.HasOne("SportCentrum.Models.Training", "Training")
                        .WithMany("Sessions")
                        .HasForeignKey("TrainingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coach");

                    b.Navigation("Training");
                });

            modelBuilder.Entity("SportCentrum.Models.Coach", b =>
                {
                    b.Navigation("CoachTrainings");

                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("SportCentrum.Models.Training", b =>
                {
                    b.Navigation("CoachTrainings");

                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("SportCentrum.Models.TrainingSession", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("SportCentrum.Models.User", b =>
                {
                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
